
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`<q-i>include</q-w> <q-l>"<a href="__HDL_srcfile_11.htm">DriverBase.sv</a>"</q-l>
<a name="2"><q-n>     2  </q-n></a><q-w>class</q-w> Driver <q-w>extends</q-w> DriverBase;
<a name="3"><q-n>     3  </q-n></a>  <q-m>//mailbox in_box;	// Generator mailbox // QUESTA QUIRK</q-m>
<a name="4"><q-n>     4  </q-n></a>  <q-w>typedef</q-w> mailbox #(Packet) in_box_type;
<a name="5"><q-n>     5  </q-n></a>  in_box_type in_box = <q-w>new</q-w>;
<a name="6"><q-n>     6  </q-n></a>  <q-m>//mailbox out_box;	// Scoreboard mailbox // QUESTA QUIRK</q-m>
<a name="7"><q-n>     7  </q-n></a>  <q-w>typedef</q-w> mailbox #(Packet) out_box_type;
<a name="8"><q-n>     8  </q-n></a>  out_box_type out_box = <q-w>new</q-w>;
<a name="9"><q-n>     9  </q-n></a>  <q-m>//semaphore sem[];	// output port arbitration</q-m>
<a name="10"><q-n>     10  </q-n></a>
<a name="11"><q-n>     11  </q-n></a>  <q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"Driver"</q-l>, in_box_type in_box, out_box_type out_box, <q-w>virtual</q-w> Execute_io.TB Execute);
<a name="12"><q-n>     12  </q-n></a>  <q-w>extern</q-w> <q-w>virtual</q-w> <q-w>task</q-w> start();
<a name="13"><q-n>     13  </q-n></a><q-w>endclass</q-w>
<a name="14"><q-n>     14  </q-n></a>
<a name="15"><q-n>     15  </q-n></a><q-w>function</q-w> Driver::<q-w>new</q-w>(<q-w>string</q-w> name= <q-l>"Driver"</q-l>, in_box_type in_box, out_box_type out_box, <q-w>virtual</q-w> Execute_io.TB Execute);
<a name="16"><q-n>     16  </q-n></a>  <q-w>super</q-w>.<q-w>new</q-w>(name, Execute);
<a name="17"><q-n>     17  </q-n></a>  <q-w>this</q-w>.in_box = in_box;
<a name="18"><q-n>     18  </q-n></a>  <q-w>this</q-w>.out_box = out_box;
<a name="19"><q-n>     19  </q-n></a><q-w>endfunction</q-w>
<a name="20"><q-n>     20  </q-n></a>
<a name="21"><q-n>     21  </q-n></a><q-w>task</q-w> Driver::start();
<a name="22"><q-n>     22  </q-n></a>	<q-w>reg</q-w>	[6:0]	control_in_temp;
<a name="23"><q-n>     23  </q-n></a>	<q-w>int</q-w> get_flag = 10; 
<a name="24"><q-n>     24  </q-n></a>	<q-w>int</q-w> packets_sent = 0;
<a name="25"><q-n>     25  </q-n></a>	$display ($<q-w>time</q-w>, <q-l>"ns:  [DRIVER] Driver Started"</q-l>);
<a name="26"><q-n>     26  </q-n></a>    <q-w>fork</q-w>
<a name="27"><q-n>     27  </q-n></a>	    <q-w>forever</q-w>
<a name="28"><q-n>     28  </q-n></a>	    <q-w>begin</q-w>
<a name="29"><q-n>     29  </q-n></a>	      	in_box.get(pkt2send); <q-m>// grab the packet in the q</q-m>
<a name="30"><q-n>     30  </q-n></a>			packets_sent++;
<a name="31"><q-n>     31  </q-n></a>		  	control_in_temp = {pkt2send.operation_gen, pkt2send.immp_regn_op_gen, pkt2send.opselect_gen};
<a name="32"><q-n>     32  </q-n></a>			$display ($<q-w>time</q-w>, <q-l>"[DRIVER] Sending in new packet BEGIN"</q-l>);
<a name="33"><q-n>     33  </q-n></a>		  	<q-w>this</q-w>.payload_control_in =	control_in_temp;
<a name="34"><q-n>     34  </q-n></a>		  	<q-w>this</q-w>.payload_src1 		= 	pkt2send.src1; 
<a name="35"><q-n>     35  </q-n></a>		  	<q-w>this</q-w>.payload_src2 		= 	pkt2send.src2;	
<a name="36"><q-n>     36  </q-n></a>		  	<q-w>this</q-w>.payload_imm 		= 	pkt2send.imm;  
<a name="37"><q-n>     37  </q-n></a>		  	<q-w>this</q-w>.payload_mem_data 	= 	pkt2send.mem_data;
<a name="38"><q-n>     38  </q-n></a>			<q-w>this</q-w>.payload_enable 	= 	pkt2send.enable;
<a name="39"><q-n>     39  </q-n></a>	      				
<a name="40"><q-n>     40  </q-n></a>	 	    send();
<a name="41"><q-n>     41  </q-n></a>			$display ($<q-w>time</q-w>, <q-l>"ns:  [DRIVER] Sending in new packet END"</q-l>);
<a name="42"><q-n>     42  </q-n></a>			$display ($<q-w>time</q-w>, <q-l>"ns:  [DRIVER] Number of packets sent = %d"</q-l>, packets_sent);
<a name="43"><q-n>     43  </q-n></a>	     	out_box.put(pkt2send);
<a name="44"><q-n>     44  </q-n></a>			$display ($<q-w>time</q-w>,  <q-l>"ns:  [DRIVER] The number of Packets in the Generator Mailbox = %d"</q-l>, in_box.num());
<a name="45"><q-n>     45  </q-n></a>			<q-w>if</q-w>(in_box.num() == 0)
<a name="46"><q-n>     46  </q-n></a>			<q-w>begin</q-w>
<a name="47"><q-n>     47  </q-n></a>				<q-w>break</q-w>;
<a name="48"><q-n>     48  </q-n></a>			<q-w>end</q-w>
<a name="49"><q-n>     49  </q-n></a>		  	@(Execute.cb);
<a name="50"><q-n>     50  </q-n></a>	    <q-w>end</q-w>
<a name="51"><q-n>     51  </q-n></a>	<q-w>join_none</q-w>	
<a name="52"><q-n>     52  </q-n></a>	$display ($<q-w>time</q-w>,  <q-l>"[DRIVER] DRIVER Forking of process is finished"</q-l>);		
<a name="53"><q-n>     53  </q-n></a><q-w>endtask</q-w>
<a name="54"><q-n>     54  </q-n></a>
</pre>
</tt>

  
</body>
</html>
