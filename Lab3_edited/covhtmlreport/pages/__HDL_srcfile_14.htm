
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html;charset=utf-8"/>
  <title>Questa Coverage Report</title>
  <link rel="StyleSheet" media="screen" href="../css/hdl2html.css"/>
</head>
<body id="hdl2html">
  <tt>
<pre>
<a name="1"><q-n>     1  </q-n></a>`<q-i>include</q-w> <q-l>"data_defs.v"</q-l>
<a name="2"><q-n>     2  </q-n></a>`<q-i>include</q-w> <q-l>"<a href="__HDL_srcfile_10.htm">OutputPacket.sv</a>"</q-l>
<a name="3"><q-n>     3  </q-n></a><q-w>class</q-w> ReceiverBase;
<a name="4"><q-n>     4  </q-n></a>	<q-w>virtual</q-w> Execute_io.TB Execute;	<q-m>// interface signals</q-m>
<a name="5"><q-n>     5  </q-n></a>	<q-w>virtual</q-w> DUT_probe_if Prober; <q-m>// Probe signals</q-m>
<a name="6"><q-n>     6  </q-n></a>	
<a name="7"><q-n>     7  </q-n></a>	<q-w>string</q-w>   name;		<q-m>// unique identifier</q-m>
<a name="8"><q-n>     8  </q-n></a>	OutputPacket   pkt2cmp;		<q-m>// actual Packet object</q-m>
<a name="9"><q-n>     9  </q-n></a>	<q-w>reg</q-w>	[`REGISTER_WIDTH-1:0]	aluout2cmp;
<a name="10"><q-n>     10  </q-n></a>	<q-w>reg</q-w>				mem_en2cmp;
<a name="11"><q-n>     11  </q-n></a>	<q-w>reg</q-w>	[`REGISTER_WIDTH-1:0]	memout2cmp;
<a name="12"><q-n>     12  </q-n></a>	<q-w>reg</q-w>				carry2cmp;
<a name="13"><q-n>     13  </q-n></a>
<a name="14"><q-n>     14  </q-n></a>	<q-m>// Connections for the Probe signals</q-m>
<a name="15"><q-n>     15  </q-n></a>	<q-w>reg</q-w> 	[`REGISTER_WIDTH-1:0]	aluin1_cmp;
<a name="16"><q-n>     16  </q-n></a>	<q-w>reg</q-w> 	[`REGISTER_WIDTH-1:0]	aluin2_cmp; 
<a name="17"><q-n>     17  </q-n></a>	<q-w>reg</q-w> 	[2:0]			opselect_cmp;
<a name="18"><q-n>     18  </q-n></a>	<q-w>reg</q-w> 	[2:0]			operation_cmp;
<a name="19"><q-n>     19  </q-n></a>	<q-w>reg</q-w> 	[4:0]  			shift_number_cmp;
<a name="20"><q-n>     20  </q-n></a>	<q-w>reg</q-w> 				enable_shift_cmp; 
<a name="21"><q-n>     21  </q-n></a>	<q-w>reg</q-w> 				enable_arith_cmp; 
<a name="22"><q-n>     22  </q-n></a>	
<a name="23"><q-n>     23  </q-n></a>	<q-w>extern</q-w> <q-w>function</q-w> <q-w>new</q-w>(<q-w>string</q-w> name = <q-l>"ReceiverBase"</q-l>, <q-w>virtual</q-w> Execute_io.TB Execute, <q-w>virtual</q-w> DUT_probe_if Prober);
<a name="24"><q-n>     24  </q-n></a>	<q-w>extern</q-w> <q-w>virtual</q-w> <q-w>task</q-w> recv();
<a name="25"><q-n>     25  </q-n></a>	<q-w>extern</q-w> <q-w>virtual</q-w> <q-w>task</q-w> get_payload();
<a name="26"><q-n>     26  </q-n></a><q-w>endclass</q-w>
<a name="27"><q-n>     27  </q-n></a>
<a name="28"><q-n>     28  </q-n></a><q-w>function</q-w> ReceiverBase::<q-w>new</q-w>(<q-w>string</q-w> name, <q-w>virtual</q-w> Execute_io.TB Execute, <q-w>virtual</q-w> DUT_probe_if Prober);
<a name="29"><q-n>     29  </q-n></a>	<q-w>this</q-w>.name = name;
<a name="30"><q-n>     30  </q-n></a>	<q-w>this</q-w>.Execute = Execute;
<a name="31"><q-n>     31  </q-n></a>	<q-w>this</q-w>.Prober = Prober;
<a name="32"><q-n>     32  </q-n></a>	pkt2cmp = <q-w>new</q-w>();
<a name="33"><q-n>     33  </q-n></a><q-w>endfunction</q-w>
<a name="34"><q-n>     34  </q-n></a>
<a name="35"><q-n>     35  </q-n></a><q-w>task</q-w> ReceiverBase::recv();
<a name="36"><q-n>     36  </q-n></a>	<q-w>int</q-w> pkt_cnt = 0;
<a name="37"><q-n>     37  </q-n></a>	get_payload();
<a name="38"><q-n>     38  </q-n></a>	pkt2cmp.name = $psprintf(<q-l>"rcvdPkt[%0d]"</q-l>, pkt_cnt++);
<a name="39"><q-n>     39  </q-n></a>	pkt2cmp.aluout = aluout2cmp;
<a name="40"><q-n>     40  </q-n></a>	pkt2cmp.mem_write_en = mem_en2cmp;
<a name="41"><q-n>     41  </q-n></a>	pkt2cmp.mem_data_write_out = memout2cmp;
<a name="42"><q-n>     42  </q-n></a>	pkt2cmp.carry			= carry2cmp;
<a name="43"><q-n>     43  </q-n></a>	
<a name="44"><q-n>     44  </q-n></a>	<q-m>// Probe the internal signals as well.	</q-m>
<a name="45"><q-n>     45  </q-n></a>	pkt2cmp.aluin1 = aluin1_cmp; 
<a name="46"><q-n>     46  </q-n></a>	pkt2cmp.aluin2 = aluin2_cmp; 
<a name="47"><q-n>     47  </q-n></a>	pkt2cmp.opselect = opselect_cmp;
<a name="48"><q-n>     48  </q-n></a>	pkt2cmp.operation = operation_cmp;	
<a name="49"><q-n>     49  </q-n></a>	pkt2cmp.shift_number = shift_number_cmp;
<a name="50"><q-n>     50  </q-n></a>	pkt2cmp.enable_shift = enable_shift_cmp; 
<a name="51"><q-n>     51  </q-n></a>	pkt2cmp.enable_arith = enable_arith_cmp;		
<a name="52"><q-n>     52  </q-n></a><q-w>endtask</q-w>
<a name="53"><q-n>     53  </q-n></a>
<a name="54"><q-n>     54  </q-n></a><q-w>task</q-w> ReceiverBase::get_payload();
<a name="55"><q-n>     55  </q-n></a>	mem_en2cmp = Execute.cb.mem_write_en;
<a name="56"><q-n>     56  </q-n></a>	memout2cmp = Execute.cb.mem_data_write_out;
<a name="57"><q-n>     57  </q-n></a>	
<a name="58"><q-n>     58  </q-n></a>	<q-m>// get the internals signals of the DUT as well </q-m>
<a name="59"><q-n>     59  </q-n></a>	aluin1_cmp = Prober.aluin1; 
<a name="60"><q-n>     60  </q-n></a>	aluin2_cmp = Prober.aluin2; 
<a name="61"><q-n>     61  </q-n></a>	opselect_cmp = Prober.opselect;
<a name="62"><q-n>     62  </q-n></a>	operation_cmp = Prober.operation;	
<a name="63"><q-n>     63  </q-n></a>	shift_number_cmp = Prober.shift_number;
<a name="64"><q-n>     64  </q-n></a>	enable_shift_cmp = Prober.enable_shift; 
<a name="65"><q-n>     65  </q-n></a>	enable_arith_cmp = Prober.enable_arith;
<a name="66"><q-n>     66  </q-n></a>
<a name="67"><q-n>     67  </q-n></a>	@ (Execute.cb);
<a name="68"><q-n>     68  </q-n></a>	$display ($<q-w>time</q-w>, <q-l>"[RECEIVER]  Getting Payload"</q-l>);
<a name="69"><q-n>     69  </q-n></a>	aluout2cmp = Execute.cb.aluout;
<a name="70"><q-n>     70  </q-n></a>	carry2cmp = Execute.cb.carry;
<a name="71"><q-n>     71  </q-n></a>	$display ($<q-w>time</q-w>, <q-l>"[RECEIVER]  Payload Contents:  Aluout = %h mem_write_en = %d mem_data_write_out = %h"</q-l>, aluout2cmp, mem_en2cmp, memout2cmp);
<a name="72"><q-n>     72  </q-n></a>	<q-m>// this is a bad example because there are no constructs of variable time for completion</q-m>
<a name="73"><q-n>     73  </q-n></a>	 <q-m>//at the negative edge of the the next clock the output should be stable</q-m>
<a name="74"><q-n>     74  </q-n></a>	 
<a name="75"><q-n>     75  </q-n></a>		
<a name="76"><q-n>     76  </q-n></a><q-w>endtask</q-w>
</pre>
</tt>

  
</body>
</html>
